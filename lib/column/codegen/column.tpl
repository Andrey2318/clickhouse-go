// Code generated by make codegen DO NOT EDIT.
// source: lib/column/codegen/column.tpl

package column

import (
	"fmt"
	"github.com/ClickHouse/clickhouse-go/lib/binary"
)


func (t Type) Column() (Interface,error) {
	switch t {
{{- range . }}
	case "{{ .ChType }}":
		return &{{ .ChType }}{}, nil
{{- end }}
	case "String":
		return &String{}, nil
	case "DateTime":
		return &DateTime{}, nil
	}
	switch {
	case t.IsEnum():
		return Enum(string(t))
	case t.IsNullable():
		base, err := t.Base().Column()
		if err != nil {
			return nil, err
		}
		return &Nullable{
			base: base,
		}, nil
	}
	return &UnsupportedColumnType{
		t: t,
	}, nil
}

type (
{{- range . }}
	{{ .ChType }} []{{ .GoType }}
{{- end }}
)

var (
{{- range . }}
	_ Interface = (*{{ .ChType }})(nil)
{{- end }}
)

{{- range . }}

func (col *{{ .ChType }}) Rows() int {
	return len(*col)
}

func (col *{{ .ChType }}) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *{{ .GoType }}:
		*d = value[row]
	case **{{ .GoType }}:
		*d = new({{ .GoType }})
		**d = value[row]
	default:
		return fmt.Errorf("converting {{ .ChType }} to %T is unsupported", d)
	}
	return nil
}

func (col *{{ .ChType }}) RowValue(row int) interface{} {
	value := *col
	return value[row]
}

func (col *{{ .ChType }}) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case {{ .GoType }}:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	}
	return nil
}

func (col *{{ .ChType }}) Decode(decoder *binary.Decoder, rows int) error {
	for i := 0; i < rows; i++ {
		v, err := decoder.{{ .ChType }}()
		if err != nil {
			return err
		}
		*col = append(*col, v)
	}
	return nil
}

func (col *{{ .ChType }}) Encode(encoder *binary.Encoder) error {
	for _, v := range *col {
		if err := encoder.{{ .ChType }}(v); err != nil {
			return err
		}
	}
	return nil
}

{{- end }}