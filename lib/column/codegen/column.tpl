// Code generated by make codegen DO NOT EDIT.
// source: lib/column/codegen/column.tpl

package column

import (
	"strings"
	"fmt"
)

func (t Type) Column() (Interface, error) {
	switch t {
{{- range . }}
	case "{{ .ChType }}":
		return &{{ .ChType }}{}, nil
{{- end }}
	case "String":
		return &String{}, nil
	}

	switch strType := string(t); {
	case t.IsEnum():
		return Enum(string(t))
	case t.IsNullable():
		base, err := t.Base().Column()
		if err != nil {
			return nil, err
		}
		return &Nullable{
			base: base,
		}, nil
	case strings.HasPrefix(strType, "DateTime") && !strings.HasPrefix(strType, "DateTime64"):
		return (&DateTime{chType:t}).new()
	}
	return &UnsupportedColumnType{
		t: t,
	}, nil
}

type (
{{- range . }}
	{{ .ChType }} []{{ .GoType }}
{{- end }}
)

var (
{{- range . }}
	_ Interface = (*{{ .ChType }})(nil)
{{- end }}
)

{{- range . }}

func (col *{{ .ChType }}) Rows() int {
	return len(*col)
}

func (col *{{ .ChType }}) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *{{ .GoType }}:
		*d = value[row]
	case **{{ .GoType }}:
		*d = new({{ .GoType }})
		**d = value[row]
	default:
		return &ColumnConverterErr{
			op:   "ScanRow",
			to:   fmt.Sprintf("%T", dest),
			from: "{{ .ChType }}",
		}
	}
	return nil
}

func (col *{{ .ChType }}) RowValue(row int) interface{} {
	value := *col
	return value[row]
}


func (col *{{ .ChType }}) Append(v interface{}) error {
	switch v := v.(type) {
	case []{{ .GoType }}:
		*col = append(*col, v...)
	default:
		return &ColumnConverterErr{
			op:   "Append",
			to:   "{{ .ChType }}",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *{{ .ChType }}) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case {{ .GoType }}:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	default:
		return &ColumnConverterErr{
			op:   "AppendRow",
			to:   "{{ .ChType }}",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

{{- end }}