// Code generated by make codegen DO NOT EDIT.
// source: lib/column/codegen/column.tpl

package column

import (
	"fmt"
	"strings"
)

func (t Type) Column() (Interface, error) {
	switch t {
	case "Float32":
		return &Float32{}, nil
	case "Float64":
		return &Float64{}, nil
	case "Int8":
		return &Int8{}, nil
	case "Int16":
		return &Int16{}, nil
	case "Int32":
		return &Int32{}, nil
	case "Int64":
		return &Int64{}, nil
	case "UInt8":
		return &UInt8{}, nil
	case "UInt16":
		return &UInt16{}, nil
	case "UInt32":
		return &UInt32{}, nil
	case "UInt64":
		return &UInt64{}, nil
	case "String":
		return &String{}, nil
	}

	switch strType := string(t); {
	case strings.HasPrefix(string(t), "Nullable"):
		return (&Nullable{}).new(t)
	case strings.HasPrefix(string(t), "Enum8") || strings.HasPrefix(string(t), "Enum16"):
		return Enum(t)
	case strings.HasPrefix(strType, "DateTime") && !strings.HasPrefix(strType, "DateTime64"):
		return (&DateTime{}).new(t)
	}
	return &UnsupportedColumnType{
		t: t,
	}, nil
}

type (
	Float32 []float32
	Float64 []float64
	Int8    []int8
	Int16   []int16
	Int32   []int32
	Int64   []int64
	UInt8   []uint8
	UInt16  []uint16
	UInt32  []uint32
	UInt64  []uint64
)

var (
	_ Interface = (*Float32)(nil)
	_ Interface = (*Float64)(nil)
	_ Interface = (*Int8)(nil)
	_ Interface = (*Int16)(nil)
	_ Interface = (*Int32)(nil)
	_ Interface = (*Int64)(nil)
	_ Interface = (*UInt8)(nil)
	_ Interface = (*UInt16)(nil)
	_ Interface = (*UInt32)(nil)
	_ Interface = (*UInt64)(nil)
)

func (col *Float32) Type() Type {
	return "Float32"
}

func (col *Float32) Rows() int {
	return len(*col)
}

func (col *Float32) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *float32:
		*d = value[row]
	case **float32:
		*d = new(float32)
		**d = value[row]
	default:
		return &ColumnConverterErr{
			op:   "ScanRow",
			to:   fmt.Sprintf("%T", dest),
			from: "Float32",
		}
	}
	return nil
}

func (col *Float32) RowValue(row int) interface{} {
	value := *col
	return value[row]
}

func (col *Float32) Append(v interface{}) error {
	switch v := v.(type) {
	case []float32:
		*col = append(*col, v...)
	default:
		return &ColumnConverterErr{
			op:   "Append",
			to:   "Float32",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *Float32) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case float32:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	default:
		return &ColumnConverterErr{
			op:   "AppendRow",
			to:   "Float32",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *Float64) Type() Type {
	return "Float64"
}

func (col *Float64) Rows() int {
	return len(*col)
}

func (col *Float64) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *float64:
		*d = value[row]
	case **float64:
		*d = new(float64)
		**d = value[row]
	default:
		return &ColumnConverterErr{
			op:   "ScanRow",
			to:   fmt.Sprintf("%T", dest),
			from: "Float64",
		}
	}
	return nil
}

func (col *Float64) RowValue(row int) interface{} {
	value := *col
	return value[row]
}

func (col *Float64) Append(v interface{}) error {
	switch v := v.(type) {
	case []float64:
		*col = append(*col, v...)
	default:
		return &ColumnConverterErr{
			op:   "Append",
			to:   "Float64",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *Float64) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case float64:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	default:
		return &ColumnConverterErr{
			op:   "AppendRow",
			to:   "Float64",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *Int8) Type() Type {
	return "Int8"
}

func (col *Int8) Rows() int {
	return len(*col)
}

func (col *Int8) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *int8:
		*d = value[row]
	case **int8:
		*d = new(int8)
		**d = value[row]
	default:
		return &ColumnConverterErr{
			op:   "ScanRow",
			to:   fmt.Sprintf("%T", dest),
			from: "Int8",
		}
	}
	return nil
}

func (col *Int8) RowValue(row int) interface{} {
	value := *col
	return value[row]
}

func (col *Int8) Append(v interface{}) error {
	switch v := v.(type) {
	case []int8:
		*col = append(*col, v...)
	default:
		return &ColumnConverterErr{
			op:   "Append",
			to:   "Int8",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *Int8) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case int8:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	default:
		return &ColumnConverterErr{
			op:   "AppendRow",
			to:   "Int8",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *Int16) Type() Type {
	return "Int16"
}

func (col *Int16) Rows() int {
	return len(*col)
}

func (col *Int16) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *int16:
		*d = value[row]
	case **int16:
		*d = new(int16)
		**d = value[row]
	default:
		return &ColumnConverterErr{
			op:   "ScanRow",
			to:   fmt.Sprintf("%T", dest),
			from: "Int16",
		}
	}
	return nil
}

func (col *Int16) RowValue(row int) interface{} {
	value := *col
	return value[row]
}

func (col *Int16) Append(v interface{}) error {
	switch v := v.(type) {
	case []int16:
		*col = append(*col, v...)
	default:
		return &ColumnConverterErr{
			op:   "Append",
			to:   "Int16",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *Int16) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case int16:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	default:
		return &ColumnConverterErr{
			op:   "AppendRow",
			to:   "Int16",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *Int32) Type() Type {
	return "Int32"
}

func (col *Int32) Rows() int {
	return len(*col)
}

func (col *Int32) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *int32:
		*d = value[row]
	case **int32:
		*d = new(int32)
		**d = value[row]
	default:
		return &ColumnConverterErr{
			op:   "ScanRow",
			to:   fmt.Sprintf("%T", dest),
			from: "Int32",
		}
	}
	return nil
}

func (col *Int32) RowValue(row int) interface{} {
	value := *col
	return value[row]
}

func (col *Int32) Append(v interface{}) error {
	switch v := v.(type) {
	case []int32:
		*col = append(*col, v...)
	default:
		return &ColumnConverterErr{
			op:   "Append",
			to:   "Int32",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *Int32) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case int32:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	default:
		return &ColumnConverterErr{
			op:   "AppendRow",
			to:   "Int32",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *Int64) Type() Type {
	return "Int64"
}

func (col *Int64) Rows() int {
	return len(*col)
}

func (col *Int64) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *int64:
		*d = value[row]
	case **int64:
		*d = new(int64)
		**d = value[row]
	default:
		return &ColumnConverterErr{
			op:   "ScanRow",
			to:   fmt.Sprintf("%T", dest),
			from: "Int64",
		}
	}
	return nil
}

func (col *Int64) RowValue(row int) interface{} {
	value := *col
	return value[row]
}

func (col *Int64) Append(v interface{}) error {
	switch v := v.(type) {
	case []int64:
		*col = append(*col, v...)
	default:
		return &ColumnConverterErr{
			op:   "Append",
			to:   "Int64",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *Int64) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case int64:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	default:
		return &ColumnConverterErr{
			op:   "AppendRow",
			to:   "Int64",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *UInt8) Type() Type {
	return "UInt8"
}

func (col *UInt8) Rows() int {
	return len(*col)
}

func (col *UInt8) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *uint8:
		*d = value[row]
	case **uint8:
		*d = new(uint8)
		**d = value[row]
	default:
		return &ColumnConverterErr{
			op:   "ScanRow",
			to:   fmt.Sprintf("%T", dest),
			from: "UInt8",
		}
	}
	return nil
}

func (col *UInt8) RowValue(row int) interface{} {
	value := *col
	return value[row]
}

func (col *UInt8) Append(v interface{}) error {
	switch v := v.(type) {
	case []uint8:
		*col = append(*col, v...)
	default:
		return &ColumnConverterErr{
			op:   "Append",
			to:   "UInt8",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *UInt8) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case uint8:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	default:
		return &ColumnConverterErr{
			op:   "AppendRow",
			to:   "UInt8",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *UInt16) Type() Type {
	return "UInt16"
}

func (col *UInt16) Rows() int {
	return len(*col)
}

func (col *UInt16) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *uint16:
		*d = value[row]
	case **uint16:
		*d = new(uint16)
		**d = value[row]
	default:
		return &ColumnConverterErr{
			op:   "ScanRow",
			to:   fmt.Sprintf("%T", dest),
			from: "UInt16",
		}
	}
	return nil
}

func (col *UInt16) RowValue(row int) interface{} {
	value := *col
	return value[row]
}

func (col *UInt16) Append(v interface{}) error {
	switch v := v.(type) {
	case []uint16:
		*col = append(*col, v...)
	default:
		return &ColumnConverterErr{
			op:   "Append",
			to:   "UInt16",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *UInt16) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case uint16:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	default:
		return &ColumnConverterErr{
			op:   "AppendRow",
			to:   "UInt16",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *UInt32) Type() Type {
	return "UInt32"
}

func (col *UInt32) Rows() int {
	return len(*col)
}

func (col *UInt32) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *uint32:
		*d = value[row]
	case **uint32:
		*d = new(uint32)
		**d = value[row]
	default:
		return &ColumnConverterErr{
			op:   "ScanRow",
			to:   fmt.Sprintf("%T", dest),
			from: "UInt32",
		}
	}
	return nil
}

func (col *UInt32) RowValue(row int) interface{} {
	value := *col
	return value[row]
}

func (col *UInt32) Append(v interface{}) error {
	switch v := v.(type) {
	case []uint32:
		*col = append(*col, v...)
	default:
		return &ColumnConverterErr{
			op:   "Append",
			to:   "UInt32",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *UInt32) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case uint32:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	default:
		return &ColumnConverterErr{
			op:   "AppendRow",
			to:   "UInt32",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *UInt64) Type() Type {
	return "UInt64"
}

func (col *UInt64) Rows() int {
	return len(*col)
}

func (col *UInt64) ScanRow(dest interface{}, row int) error {
	value := *col
	switch d := dest.(type) {
	case *uint64:
		*d = value[row]
	case **uint64:
		*d = new(uint64)
		**d = value[row]
	default:
		return &ColumnConverterErr{
			op:   "ScanRow",
			to:   fmt.Sprintf("%T", dest),
			from: "UInt64",
		}
	}
	return nil
}

func (col *UInt64) RowValue(row int) interface{} {
	value := *col
	return value[row]
}

func (col *UInt64) Append(v interface{}) error {
	switch v := v.(type) {
	case []uint64:
		*col = append(*col, v...)
	default:
		return &ColumnConverterErr{
			op:   "Append",
			to:   "UInt64",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}

func (col *UInt64) AppendRow(v interface{}) error {
	switch v := v.(type) {
	case uint64:
		*col = append(*col, v)
	case null:
		*col = append(*col, 0)
	default:
		return &ColumnConverterErr{
			op:   "AppendRow",
			to:   "UInt64",
			from: fmt.Sprintf("%T", v),
		}
	}
	return nil
}
